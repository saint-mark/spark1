/* Generated By:JavaCC: Do not edit this line. HTMLTokenManager.java */
package dead;

public class HTMLTokenManager implements HTMLConstants
{
  String attr;
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjMoveStringLiteralDfa0_7()
{
   return jjMoveNfa_7(0, 0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_7(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  kind = 20;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 20;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_4(0x1c000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_4(active0, 0x8000L);
      case 102:
         return jjMoveStringLiteralDfa2_4(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa2_4(active0, 0x10000L);
      default :
         return 2;
   }
}
private final int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_4(active0, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa3_4(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa3_4(active0, 0x4000L);
      default :
         return 3;
   }
}
private final int jjMoveStringLiteralDfa3_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa4_4(active0, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa4_4(active0, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa4_4(active0, 0x4000L);
      default :
         return 4;
   }
}
private final int jjMoveStringLiteralDfa4_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa5_4(active0, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa5_4(active0, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa5_4(active0, 0x10000L);
      default :
         return 5;
   }
}
private final int jjMoveStringLiteralDfa5_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_4(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa6_4(active0, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa6_4(active0, 0x10000L);
      default :
         return 6;
   }
}
private final int jjMoveStringLiteralDfa6_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_4(active0, 0x10000L);
      case 102:
         return jjMoveStringLiteralDfa7_4(active0, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa7_4(active0, 0x4000L);
      default :
         return 7;
   }
}
private final int jjMoveStringLiteralDfa7_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa8_4(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa8_4(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa8_4(active0, 0x10000L);
      default :
         return 8;
   }
}
private final int jjMoveStringLiteralDfa8_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(8, 15);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_4(active0, 0x4000L);
      case 121:
         return jjMoveStringLiteralDfa9_4(active0, 0x10000L);
      default :
         return 9;
   }
   return 9;
}
private final int jjMoveStringLiteralDfa9_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa10_4(active0, 0x4000L);
      case 112:
         return jjMoveStringLiteralDfa10_4(active0, 0x10000L);
      default :
         return 10;
   }
}
private final int jjMoveStringLiteralDfa10_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_4(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa11_4(active0, 0x4000L);
      default :
         return 11;
   }
}
private final int jjMoveStringLiteralDfa11_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 11;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 11;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa12_4(active0, 0x10000L);
      case 100:
         return jjMoveStringLiteralDfa12_4(active0, 0x4000L);
      default :
         return 12;
   }
}
private final int jjMoveStringLiteralDfa12_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 12;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 12;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa13_4(active0, 0x10000L);
      case 61:
         return jjMoveStringLiteralDfa13_4(active0, 0x4000L);
      default :
         return 13;
   }
}
private final int jjMoveStringLiteralDfa13_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 13;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 13;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa14_4(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa14_4(active0, 0x10000L);
      default :
         return 14;
   }
}
private final int jjMoveStringLiteralDfa14_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 14;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 14;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa15_4(active0, 0x10000L);
      case 112:
         return jjMoveStringLiteralDfa15_4(active0, 0x4000L);
      default :
         return 15;
   }
}
private final int jjMoveStringLiteralDfa15_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 15;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 15;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa16_4(active0, 0x4000L);
      case 120:
         return jjMoveStringLiteralDfa16_4(active0, 0x10000L);
      default :
         return 16;
   }
}
private final int jjMoveStringLiteralDfa16_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 16;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 16;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa17_4(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa17_4(active0, 0x10000L);
      default :
         return 17;
   }
}
private final int jjMoveStringLiteralDfa17_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 17;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 17;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa18_4(active0, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa18_4(active0, 0x4000L);
      default :
         return 18;
   }
}
private final int jjMoveStringLiteralDfa18_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 18;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 18;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa19_4(active0, 0x10000L);
      case 34:
         return jjMoveStringLiteralDfa19_4(active0, 0x4000L);
      default :
         return 19;
   }
}
private final int jjMoveStringLiteralDfa19_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 19;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_4(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa20_4(active0, 0x10000L);
      default :
         return 20;
   }
}
private final int jjMoveStringLiteralDfa20_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 20;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_4(active0, 0x14000L);
      default :
         return 21;
   }
}
private final int jjMoveStringLiteralDfa21_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 21;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 21;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa22_4(active0, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa22_4(active0, 0x10000L);
      default :
         return 22;
   }
}
private final int jjMoveStringLiteralDfa22_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 22;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 22;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa23_4(active0, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa23_4(active0, 0x4000L);
      default :
         return 23;
   }
}
private final int jjMoveStringLiteralDfa23_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 23;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 23;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa24_4(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa24_4(active0, 0x4000L);
      default :
         return 24;
   }
}
private final int jjMoveStringLiteralDfa24_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 24;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 24;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(24, 16);
         break;
      case 111:
         return jjMoveStringLiteralDfa25_4(active0, 0x4000L);
      default :
         return 25;
   }
   return 25;
}
private final int jjMoveStringLiteralDfa25_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 25;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 25;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa26_4(active0, 0x4000L);
      default :
         return 26;
   }
}
private final int jjMoveStringLiteralDfa26_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 26;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 26;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa27_4(active0, 0x4000L);
      default :
         return 27;
   }
}
private final int jjMoveStringLiteralDfa27_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 27;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 27;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(27, 14);
         break;
      default :
         return 28;
   }
   return 28;
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 62:
         return jjStopAtPos(0, 22);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 21);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1eL) != 0L)
            return 3;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 2, 3);
      case 10:
         return jjStartNfaWithStates_0(0, 4, 3);
      case 13:
         return jjStartNfaWithStates_0(0, 3, 3);
      case 32:
         return jjStartNfaWithStates_0(0, 1, 3);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x1ffe0L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa2_0(active0, 0x1740L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x12000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 62:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(2, 11);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x12000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4080L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(3, 10);
         else if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(3, 12);
         break;
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x300L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x12000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x4040L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8200L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x12000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 62:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(5, 5);
         else if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(5, 7);
         break;
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x12000L);
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x12000L);
      case 62:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(6, 6);
         else if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(6, 8);
         else if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(6, 9);
         break;
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x12000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(8, 15);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0x12000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x12000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x12000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa12_0(active0, 0x12000L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa13_0(active0, 0x12000L);
      case 61:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000L);
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000L);
      case 120:
         return jjMoveStringLiteralDfa16_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa18_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa19_0(active0, 0x10000L);
      case 34:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active0, 0x4000L);
      case 34:
         return jjMoveStringLiteralDfa20_0(active0, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa20_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa21_0(active0, 0x2000L);
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x14000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa22_0(active0, 0x10000L);
      case 118:
         return jjMoveStringLiteralDfa22_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private final int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa23_0(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa23_0(active0, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa23_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
private final int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa24_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa24_0(active0, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa24_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
private final int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(24, 16);
         break;
      case 111:
         return jjMoveStringLiteralDfa25_0(active0, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa25_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
private final int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa26_0(active0, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa26_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
private final int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa27_0(active0, 0x6000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0);
}
private final int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(27, 14);
         return jjMoveStringLiteralDfa28_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0);
}
private final int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa29_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0);
}
private final int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa30_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0);
}
private final int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa31_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0);
}
private final int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0);
      return 31;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa32_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0);
}
private final int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0);
      return 32;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa33_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0);
}
private final int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0);
      return 33;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa34_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0);
}
private final int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0);
      return 34;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa35_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0);
}
private final int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0);
      return 35;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa36_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0);
}
private final int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0);
      return 36;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa37_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(35, active0);
}
private final int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(35, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, active0);
      return 37;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(37, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(36, active0);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  if ((0xaffffffeffffd9ffL & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  break;
               case 0:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if ((0xaffffffeffffd9ffL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if ((0xafffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(1, 2);
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 0:
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAddTwoStates(1, 2);
                  }
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 62:
         return jjStopAtPos(0, 19);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa0_5()
{
   return jjMoveNfa_5(0, 0);
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  kind = 17;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 17;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 18);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa0_9()
{
   return jjMoveNfa_9(0, 0);
}
private final int jjMoveNfa_9(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  kind = 23;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 23;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa1_3(0x2000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 24);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\74\150\164\155\154\76", 
"\74\57\150\164\155\154\76", "\74\142\157\144\171\76", "\74\57\142\157\144\171\76", 
"\74\57\146\157\162\155\76", "\74\57\141\76", "\74\160\76", "\74\57\160\76", 
"\74\151\156\160\165\164\40\164\171\160\145\75\42\163\165\142\155\151\164\42\40\166\141\154\165\145\75\42\163\165\142\155\151\164\42\40\57\76", null, null, null, null, null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_OPENFORM3", 
   "IN_OPENLINK3", 
   "IN_INPUT3", 
   "IN_P", 
   "IN_OPENFORM", 
   "IN_OPENFORM2", 
   "IN_OPENLINK", 
   "IN_OPENLINK2", 
   "IN_INPUT", 
   "IN_INPUT2", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 7, 9, 6, 1, 0, 8, 2, 0, 10, 3, 
   0, -1, 
};
static final long[] jjtoToken = {
   0x6483fe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static final long[] jjtoMore = {
   0x1b7c000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[3];
private final int[] jjstateSet = new int[6];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public HTMLTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public HTMLTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 3; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 11 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         t.image = "";
      else
         t.image = image.toString();
      t.beginLine = t.endLine = input_stream.getBeginLine();
      t.beginColumn = t.endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
   }
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 17;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
       case 7:
         jjmatchedKind = 20;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         break;
       case 9:
         jjmatchedKind = 23;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         break;
       case 10:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_10();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 14 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                      image.setLength(0);
         break;
      case 15 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   image.setLength(0);
         break;
      case 16 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                                     image.setLength(0);
         break;
      case 17 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                 attr = ""+image;
         break;
      case 20 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                 attr = ""+image;
         break;
      case 23 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                 attr = ""+image;
         break;
      default : 
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 19 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                    matchedToken.attribute = attr;
         break;
      case 22 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                    matchedToken.attribute = attr;
         break;
      case 25 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                  matchedToken.attribute = attr;
         break;
      case 26 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         matchedToken.attribute = matchedToken.image;
         break;
      default : 
         break;
   }
}
}
